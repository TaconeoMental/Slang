LETRA            = "A" ... "Z"
                 | "a" ... "z"
                 | "_"
DIGITO_DECIMAL   = "0" ... "9";
IDENTIFICADOR    = LETRA, {LETRA | DIGITO_DECIMAL};
LISTA_IDS        = IDENTIFICADOR, {",", IDENTIFICADOR};
LITERAL_ENTERO   = (DIGITO_DECIMAL - "0"), {DIGITO_DECIMAL};
LITERAL_FLOAT    = DECIMALES, ".", DECIMALES;
DECIMALES        = DIGITO_DECIMAL, {DIGITO_DECIMAL};
LITERAL          = LITERAL_ENTERO
                 | LITERAL_FLOAT;
   
OPERANDO         = LITERAL
                 | "(", EXPR, ")";
                
LISTA_STMTS      = {ESTAMENTO};
LISTA_EXPR       = EXPR, {",", EXPR};
EXPR             = EXPR_BOOL_OR;
EXPR_BOOL_OR     = EXPR_BOOL_AND, {"|", EXPR_BOOL_AND};
EXPR_BOOL_AND    = EXPR_BOOL_NEG, {"&", EXPR_BOOL_NEG};
EXPR_BOOL_NEG    = "¬", EXPR_BOOL_NEG
                 | EXPR_COMP;
EXPR_COMP        = RELATIONAL, {OP_EQUALITY, RELATIONAL};
OP_EQUALITY      = "=="
                 | "¬=";
RELATIONAL       = EXPR_ARITMETICA, {OP_RELATIONAL, EXPR_ARITMETICA};
OP_RELATIONAL    = ">"
                 | "<"
                 | ">="
                 | "<=";
EXPR_ARITMETICA  = MULT, {OP_SUMA, MULT};
OP_SUMA          = "+"
                 | "-";
MULT             = NEG, {OP_MULT, NEG};
OP_MULT          = "*"
                 | "/"
                 | "%";
NEG              = "-", NEG
                 | EXPR_PRIMARIA

# Pequeño torpedo para eliminación de left recursion
# A -> AB | C1 | C2 | C3 | C4...
# => A  -> C1A' | C2A' | C3A' | C4A'...
#    A' -> BA' | ε

EXPR_PRIMARIA    = FUNC_CALL, EXPR_PRIMARIA_P
                 | STRUCT_INIT, EXPR_PRIMARIA_P
                 | OPERANDO, EXPR_PRIMARIA_P

EXPR_PRIMARIA_P  = ".", EXPR_PRIMARIA, EXPR_PRIMARIA_P
                 | ε

STRUCT_INIT      = EXPR_PRIMARIA, "{", [LISTA_EXPR], "}";
FUNC_CALL        = EXPR_PRIMARIA, "(", [LISTA_EXPR], ")";

DECL_STRUCT      = "struct", IDENTIFICADOR, BLOCK;

DECL_FN          = "fn", IDENTIFICADOR, PARAMETROS, BLOCK;
PARAMETROS       = "(", [LISTA_PARAMS], ")";
LISTA_PARAMS     = IDENTIFICADOR, {",", IDENTIFICADOR};

DECL_VARIABLE    = IDENTIFICADOR, "=", EXPR;

IF_STMT          = "if", EXPR, BLOCK, [ELSE_BLOCK];
ELSE_BLOCK       = "else", BLOCK;

WHILE_STMT       = "for", EXPR, BLOCK;

BLOCK            = "{", LISTA_STMTS, "}";
RETURN_STMTS     = "return", EXPR;
ESTAMENTO        = DECL_VARIABLE
                 | DECL_FN
                 | DECL_STRUCT
                 | RETURN_STMT
                 | IF_STMT
                 | FOR_STMT
                 | EXPR;
PROGRAMA         = {LISTA_STMTS};
